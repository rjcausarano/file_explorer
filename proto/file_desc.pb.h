// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: file_desc.proto
// Protobuf C++ Version: 5.29.3

#ifndef file_5fdesc_2eproto_2epb_2eh
#define file_5fdesc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_file_5fdesc_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fdesc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_file_5fdesc_2eproto;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Files;
struct FilesDefaultTypeInternal;
extern FilesDefaultTypeInternal _Files_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class File final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(File* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(File));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR File(
      ::google::protobuf::internal::ConstantInitialized);

  inline File(const File& from) : File(nullptr, from) {}
  inline File(File&& from) noexcept
      : File(nullptr, std::move(from)) {}
  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
        &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(File& a, File& b) { a.Swap(&b); }
  inline void Swap(File* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<File>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const File& from) { File::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(File* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "File"; }

 protected:
  explicit File(::google::protobuf::Arena* arena);
  File(::google::protobuf::Arena* arena, const File& from);
  File(::google::protobuf::Arena* arena, File&& from) noexcept
      : File(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kChildrenFieldNumber = 3,
    kIsDirFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Files children = 3;
  bool has_children() const;
  void clear_children() ;
  const ::Files& children() const;
  PROTOBUF_NODISCARD ::Files* release_children();
  ::Files* mutable_children();
  void set_allocated_children(::Files* value);
  void unsafe_arena_set_allocated_children(::Files* value);
  ::Files* unsafe_arena_release_children();

  private:
  const ::Files& _internal_children() const;
  ::Files* _internal_mutable_children();

  public:
  // bool is_dir = 2;
  void clear_is_dir() ;
  bool is_dir() const;
  void set_is_dir(bool value);

  private:
  bool _internal_is_dir() const;
  void _internal_set_is_dir(bool value);

  public:
  // @@protoc_insertion_point(class_scope:File)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      17, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const File& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Files* children_;
    bool is_dir_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fdesc_2eproto;
};
// -------------------------------------------------------------------

class Files final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Files) */ {
 public:
  inline Files() : Files(nullptr) {}
  ~Files() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Files* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Files));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Files(
      ::google::protobuf::internal::ConstantInitialized);

  inline Files(const Files& from) : Files(nullptr, from) {}
  inline Files(Files&& from) noexcept
      : Files(nullptr, std::move(from)) {}
  inline Files& operator=(const Files& from) {
    CopyFrom(from);
    return *this;
  }
  inline Files& operator=(Files&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Files& default_instance() {
    return *internal_default_instance();
  }
  static inline const Files* internal_default_instance() {
    return reinterpret_cast<const Files*>(
        &_Files_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Files& a, Files& b) { a.Swap(&b); }
  inline void Swap(Files* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Files* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Files* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Files>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Files& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Files& from) { Files::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Files* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Files"; }

 protected:
  explicit Files(::google::protobuf::Arena* arena);
  Files(::google::protobuf::Arena* arena, const Files& from);
  Files(::google::protobuf::Arena* arena, Files&& from) noexcept
      : Files(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  ::File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField<::File>* mutable_files();

  private:
  const ::google::protobuf::RepeatedPtrField<::File>& _internal_files() const;
  ::google::protobuf::RepeatedPtrField<::File>* _internal_mutable_files();
  public:
  const ::File& files(int index) const;
  ::File* add_files();
  const ::google::protobuf::RepeatedPtrField<::File>& files() const;
  // @@protoc_insertion_point(class_scope:Files)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Files& from_msg);
    ::google::protobuf::RepeatedPtrField< ::File > files_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fdesc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// File

// string name = 1;
inline void File::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& File::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:File.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void File::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:File.name)
}
inline std::string* File::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* File::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* File::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:File.name)
  return _impl_.name_.Release();
}
inline void File::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:File.name)
}

// bool is_dir = 2;
inline void File::clear_is_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_dir_ = false;
}
inline bool File::is_dir() const {
  // @@protoc_insertion_point(field_get:File.is_dir)
  return _internal_is_dir();
}
inline void File::set_is_dir(bool value) {
  _internal_set_is_dir(value);
  // @@protoc_insertion_point(field_set:File.is_dir)
}
inline bool File::_internal_is_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_dir_;
}
inline void File::_internal_set_is_dir(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_dir_ = value;
}

// .Files children = 3;
inline bool File::has_children() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.children_ != nullptr);
  return value;
}
inline void File::clear_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.children_ != nullptr) _impl_.children_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Files& File::_internal_children() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Files* p = _impl_.children_;
  return p != nullptr ? *p : reinterpret_cast<const ::Files&>(::_Files_default_instance_);
}
inline const ::Files& File::children() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:File.children)
  return _internal_children();
}
inline void File::unsafe_arena_set_allocated_children(::Files* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.children_);
  }
  _impl_.children_ = reinterpret_cast<::Files*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:File.children)
}
inline ::Files* File::release_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Files* released = _impl_.children_;
  _impl_.children_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Files* File::unsafe_arena_release_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:File.children)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Files* temp = _impl_.children_;
  _impl_.children_ = nullptr;
  return temp;
}
inline ::Files* File::_internal_mutable_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.children_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Files>(GetArena());
    _impl_.children_ = reinterpret_cast<::Files*>(p);
  }
  return _impl_.children_;
}
inline ::Files* File::mutable_children() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Files* _msg = _internal_mutable_children();
  // @@protoc_insertion_point(field_mutable:File.children)
  return _msg;
}
inline void File::set_allocated_children(::Files* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.children_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.children_ = reinterpret_cast<::Files*>(value);
  // @@protoc_insertion_point(field_set_allocated:File.children)
}

// -------------------------------------------------------------------

// Files

// repeated .File files = 1;
inline int Files::_internal_files_size() const {
  return _internal_files().size();
}
inline int Files::files_size() const {
  return _internal_files_size();
}
inline void Files::clear_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.files_.Clear();
}
inline ::File* Files::mutable_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Files.files)
  return _internal_mutable_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::File>* Files::mutable_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Files.files)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_files();
}
inline const ::File& Files::files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Files.files)
  return _internal_files().Get(index);
}
inline ::File* Files::add_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::File* _add = _internal_mutable_files()->Add();
  // @@protoc_insertion_point(field_add:Files.files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::File>& Files::files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Files.files)
  return _internal_files();
}
inline const ::google::protobuf::RepeatedPtrField<::File>&
Files::_internal_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.files_;
}
inline ::google::protobuf::RepeatedPtrField<::File>*
Files::_internal_mutable_files() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.files_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // file_5fdesc_2eproto_2epb_2eh
